pipeline {
    agent {
        node {
            label 'AL-Workplace-Dataplatform-Agent'
        }
    }
    environment {
            AWS_ACCOUNT="${params.aws_account_number}"
            DEPLOY_TO_ENV="${params.target_env}"
            //S3_BUCKET="ta-wpdata-foundational-${params.aws_account_number}-codedeployment-${params.target_env}"
            S3_BUCKET="ta-wpdata-${params.aws_account_number}-us-east-1-${params.target_env}-landing-retirement/deploy"
            REPOSITORY="${params.REPOSITORY}"
            BRANCH="${params.branch_selector}"
    	}
    stages {
        stage('display variables'){
            steps {
                sh 'echo "S3 Bucket is ${S3_BUCKET}"'
                sh 'echo "REPOSITORY is ${REPOSITORY}"'
                sh 'echo "BRANCH NAME is ${BRANCH}"'
                  }
        }
        stage('Create Assume Role') {
            steps {
                script {
                    writeFile file: "assume_role.sh", text: 'temp_role=$(aws sts assume-role --role-arn arn:aws:iam::' + AWS_ACCOUNT + ':role/ta-workplace-dataplatform-jenkins-assumed-role-' + DEPLOY_TO_ENV + ' --role-session-name \"AWSCLI-S3-session-' + DEPLOY_TO_ENV + '\"); export AWS_ACCESS_KEY_ID=\$(echo \$temp_role | jq -r .Credentials.AccessKeyId); export AWS_SECRET_ACCESS_KEY=\$(echo \$temp_role | jq -r .Credentials.SecretAccessKey); export AWS_SESSION_TOKEN=\$(echo \$temp_role | jq -r .Credentials.SessionToken); export AWS_REGION=us-east-1;'
                }
                sh 'chmod 777 -R ${WORKSPACE}/'
            }
        }
       stage('Deploy code to S3') {
            steps {
                   sh '. ${WORKSPACE}/assume_role.sh; aws s3 sync ${WORKSPACE} s3://${S3_BUCKET}/${REPOSITORY}/ --delete --exclude ".git*" --exclude "assume_role.sh"'
            }
        }
        stage('delete') {
                            steps{
                                deleteDir()
                 }
               }
    }
}